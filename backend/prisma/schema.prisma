// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid()) // Using UUID for a standard GUID
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact?

  notification notification[]
  sessions     Session[]
}

model Contact {
  id        String   @id @default(uuid()) // Assuming UUID for a unique identifier
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  picture   String   @default("/default.png")
  account   Account  @relation(fields: [id], references: [id])
}

model Session {
  id             String     @id @default(uuid())
  token          String     @unique
  accountId      String
  expiredAt      DateTime
  device         DeviceList @default(MOBILE)
  ip             String
  region         String
  city           String
  loc            String
  org            String
  timezone       String
  account        Account    @relation(fields: [accountId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastAccessedAt DateTime   @default(now())
}

model notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      TypeNotification @default(BASIC)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  accountId String
  account   Account          @relation(fields: [accountId], references: [id])
}

model SystemInfo {
  id              Int       @id @default(autoincrement())
  manufacturer    String
  model           String
  biosVendor      String?
  biosVersion     String?
  baseboardModel  String?
  baseboardVendor String?
  osName          String
  osArch          String
  osRelease       String
  cpuBrand        String
  cpuManufacturer String
  cpuSpeed        Float
  cpuCores        Int
  cpuTemperature  Float?
  totalRAM        Float
  usedRAM         Float
  batteryLevel    Float?
  batteryVoltage  Float?
  isCharging      Boolean
  disks           Disk[]
  gpus            Gpu[]
  networks        Network[]
  processes       Process[]
  createdAt       DateTime  @default(now())
}

model Disk {
  id           Int        @id @default(autoincrement())
  name         String
  size         Float
  type         String?
  used         Float
  free         Float
  systemInfoId Int
  systemInfo   SystemInfo @relation(fields: [systemInfoId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Gpu {
  id           Int        @id @default(autoincrement())
  vendor       String
  model        String
  temperature  Float?
  usage        Float?
  memory       Float?
  systemInfoId Int
  systemInfo   SystemInfo @relation(fields: [systemInfoId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Network {
  id           Int        @id @default(autoincrement())
  interface    String
  macAddress   String?
  ipAddress    String?
  rxSpeed      Float // Download speed in KB/s
  txSpeed      Float // Upload speed in KB/s
  systemInfoId Int
  systemInfo   SystemInfo @relation(fields: [systemInfoId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Process {
  id           Int        @id @default(autoincrement())
  name         String
  pid          Int
  memory       Float
  cpuUsage     Float
  systemInfoId Int
  systemInfo   SystemInfo @relation(fields: [systemInfoId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

model Cooler {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  coolerData CoolerData[]
}

model CoolerData {
  id        Int      @id @default(autoincrement())
  coolerId  Int
  mode      Mode     @default(DEFAULT)
  speed     Int
  createdAt DateTime @default(now())
  cooler    Cooler   @relation(fields: [coolerId], references: [id], onDelete: Cascade)
}

model EnvTemp {
  id          Int           @id @default(autoincrement())
  name        String
  envTempData EnvTempData[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model EnvTempData {
  id          Int      @id @default(autoincrement())
  envTempId   Int
  temperature Float
  humidity    Float
  createdAt   DateTime @default(now())
  envTemp     EnvTemp  @relation(fields: [envTempId], references: [id], onDelete: Cascade)
}

enum Mode {
  DEFAULT
  ATEMP
  ACLOCK
  MANUAL
}

enum Role {
  USER
  ADMIN
}

enum DeviceList {
  MOBILE
  TABLET
  DESKTOP
  UNKNOWN
}

enum TypeNotification {
  BASIC
  INFO
  WARNING
  ERROR
}
